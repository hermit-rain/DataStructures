package com.rain.sort;


import java.util.Arrays;

/**
 * 堆排序
 * 堆排序是利用堆这种数据结构而设计的一种排序算法，堆排序是一种选择排序
 * 它的最坏，最好，平均时间复 杂度均为 O(n log(n)) 它也是不稳定排序
 *
 * 基础
 * 二叉树：每个节点最多拥有两颗子树(即二叉树中不能有度数大于二的节点)，并且子节点有左右之分 不能随意变换其顺序
 * 满二叉树：树中任意非叶子节点都有两颗子树
 * 完全二叉树：从根节点到倒数第二层满足 满二叉树 最后一层可以不是满的但是节点按从左到右顺序排列 ==>完全二叉树包含满二叉树
 * 堆：一种特殊的完全二叉树
 * 大顶堆： 每个节点的值都大于或等于其左右孩子节点的值 (不要求其左右孩子节点的大小关系)
 * 小顶堆： 每个节点的值都小于或等于其左右孩子节点的值 (不要求其左右孩子节点的大小关系)
 *
 * 堆排序思想
 * 1.将无序序列构建成一个堆，根据升序或者降序要求选择大顶堆或者小顶堆
 * 2.将堆顶元素与末尾元素交换 ==> 将最大元素"沉"到数组的末端
 * 3.每次交换之后重新调整结构 使其满足堆结构，然后继续交换堆顶元素与当前末尾元素 反复交换 + 调整 直到整个序列有序
 *
 * 与选择排序的区别：
 * 选择排序每次通过全盘扫描的方式找到当前循环的最大值 而堆排序是通过创建堆结构的形式通过取出堆顶元素找到当前循环的最大值
 *
 * 注
 * 堆排序并不是要我们真的建立一颗二叉树 而是借助 顺序存储二叉树的思想 将数据存储从数组形式 ==> 二叉树的存储形式
 * 本质仍然是从一个数组的一般排序状态 ===> 当前数组的特定排序状态
 */

public class HeapSort {


    public static void main(String[] args) {

        //测试 要求数组按照升序排列
        int arr[] = {4, 6, 8, 5, 9, -1, -100, 89, 7, 10000};

        System.out.println("排序前的数组" + Arrays.toString(arr));
        heapSort(arr);
        System.out.println("排序后的结果为" + Arrays.toString(arr));

    }


    /**
     * 堆排序方法
     *
     * @param arr 待排序的数组
     */
    public static void heapSort(int arr[]) {

        int temp = 0;
        //1.将原数组 == > 大顶堆
        //通过循环逐渐按 从下到上 从右到左的顺序 将局部的子树调整为局部大顶堆
        for (int i = arr.length / 2 - 1; i >= 0; i--) {
            adjustHeap(arr, i, arr.length);
        }
        //2.将堆顶元素与末尾元素交换，将最大元素"沉"到数组末端
        for (int j = arr.length - 1; j > 0; j--) {
            temp = arr[j];
            arr[j] = arr[0];
            arr[0] = temp;
            //3.重新调整结构，使其满足堆定义，然后继续交换堆顶元素与当前末尾元素，反复执行调整+交换步骤，直到整个序列有序
            // j 逐渐减小 ==> 待调整数组的大小在逐渐向前缩进
            adjustHeap(arr, 0, j);
        }


    }




    /**
     * 将数组转化成 "局部大顶堆"
     * 需要根据输入的 索引值来多次进行 并不是一次方法调用就输出完整的大顶堆
     *
     * @param arr    待调整的数组
     * @param i      非叶子节点在数组中的索引
     * @param length 表示对数组中的多少个元素进行调整
     */
    public static void adjustHeap(int arr[], int i, int length) {
        //取出当前元素的值 保存为临时变量
        int temp = arr[i];
        //k ==> i 节点的左子节点
        for (int k = i * 2 + 1; k < length; k = k * 2 + 1) {
            if (k + 1 < length && arr[k] < arr[k + 1]) {
                k++; //左子节点小于右子节点 ==> k 指向右子节点
            }
            if (arr[k] > temp) {
                // 右子节点 < 其根节点则进行交换
                arr[i] = arr[k];
                i = k; // 交换后使 i指向 k 继续进行比较
            } else {
                break;
            }
        }
        //退出循环后我们已经将以 i 为父节点的子树中的最大值调整到 局部根节点了
        arr[i] = temp; // 调整原来局部根节点的位置

    }






}
